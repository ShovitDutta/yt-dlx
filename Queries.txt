==========[ Requirements ]==========
Acknowledge receipt and comprehension of these specifications with a concise "Understood."
Upon provision of a TypeScript code snippet originating from the yt-dlx project, the following actions are mandated:

1.  Error Handling Refactoring: Analyze the provided code for any instances of exception raising (e.g., `raise Exception(...)`, `sys.exit(...)`) or abrupt program termination. Refactor these sections to utilize an assumed pre-existing `emitter` object with an `emit` method. Specifically, replace all such constructs with a call to `emitter.emit("error", <error_object_or_message>)`, ensuring that relevant error context (such as exception instances or descriptive strings) is passed as the second argument to `emit`.
2.  General Error Remediation: Conduct a thorough static analysis of the code to identify potential runtime errors, including but not limited to:
      - Uncaught exceptions.
      - Incorrect type handling.
      - Resource leaks (if applicable).
      - Logical flaws leading to unexpected behavior.
      - Boundary condition issues.
    Refactor the code to implement appropriate error handling mechanisms (e.g., try-except blocks, conditional checks, resource management using `with` statements) to mitigate these potential issues.
3.  Argument Dependency and Constraint Validation: Examine the function signatures and internal logic of the provided code to understand the relationships and constraints between function arguments (both mandatory and optional). Implement a robust validation mechanism to enforce these dependencies and constraints. This may involve:
      - Explicitly checking for the presence or absence of specific argument combinations.
      - Verifying that argument values adhere to defined constraints (e.g., acceptable ranges, allowed types, mutual exclusivity).
      - Raising appropriate errors (via `emitter.emit("error")`) when invalid argument combinations or values are detected prior to the main execution logic. The error messages should clearly indicate the nature of the validation failure and the expected argument usage.
The refactored code should maintain the original functionality while incorporating the specified error handling and argument validation enhancements.
======================================================================================
|
|
|
|
|
|
|
|
|
|
|
|
|
==========[ Requirements ]==========
Acknowledge receipt and comprehension of these specifications with a concise "Understood."
Upon provision of a TypeScript code snippet originating from the yt-dlx project, the following actions are mandated:

1. I will provide a code snippet from the yt-dlx package.
2. You will have to understand and above the "export default function " area add every possible combination of @examples as well as a well detailed and explained docs.
3. please remember to add as many possible combinations of examples as possible 
======================================================================================
|
|
|
|
|
|
|
|
|
|
|
|
|
==========[ Requirements ]==========
Acknowledge receipt and comprehension of these specifications with a concise "Understood."
Upon provision of a TypeScript code snippet originating from the yt-dlx project, the following actions are mandated:

1. I will provide a code file from my yt-dlx package.
2. Provide the code samples with detailed inline comments explaining functionality and configuration.
5. Use import YouTubeDLX from "yt-dlx" 
6. Use the correct YouTubeDLX.importname from the original code's tsdoc 
7. The examples must cover the following environments:
   - TypeScript | (Express)
   - TypeScript | (Node.js)
   - ECMAScript | (Express)
   - ECMAScript | (Node.js)
   - CommonJS | (Express)
   - CommonJS | (Node.js)
======================================================================================