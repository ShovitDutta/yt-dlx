{
  "name": "yt-dlx",
  "version": "16.2.0",
  "license": "Apache-2.0",
  "main": "pkg/cjs/src/index.js",
  "types": "pkg/types/index.d.ts",
  "module": "pkg/esm/src/index.js",
  "author": {
    "name": "Shovit Dutta",
    "email": "shovitdutta1@gmail.com"
  },
  "description": "Effortless Audio-Video Downloader And Streamer!",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/yt-dlx/yt-dlx.git"
  },
  "homepage": "https://yt-dlx-shovit.koyeb.src",
  "bin": {
    "youtube": "pkg/cjs/src/cli/main.js",
    "yt-dlx": "pkg/cjs/src/cli/main.js",
    "ytdlx": "pkg/cjs/src/cli/main.js",
    "yt": "pkg/cjs/src/cli/main.js"
  },
  "files": [
    "pkg",
    "LICENSE",
    "package.json"
  ],
  "dependencies": {
    "async-retry": "^1.3.3",
    "axios": "^1.8.4",
    "colors": "^1.4.0",
    "fluent-ffmpeg": "^2.1.3",
    "fs-extra": "^11.3.0",
    "shx": "^0.4.0",
    "youtubei": "^1.6.7",
    "youtubei.js": "^13.3.0",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@types/async": "^3.2.24",
    "@types/async-retry": "^1.4.9",
    "@types/express": "^5.0.1",
    "@types/fluent-ffmpeg": "^2.1.27",
    "@types/fs-extra": "^11.0.4",
    "@types/minimist": "^1.2.5",
    "@types/node": "^22.14.1",
    "@types/readline-sync": "^1.4.8",
    "@types/supertest": "^6.0.3",
    "dotenv": "^16.5.0",
    "express": "^5.1.0",
    "rimraf": "^6.0.1",
    "typescript": "^5.8.2"
  },
  "scripts": {
    "make": "yarn install --frozen-lockfile",
    "prepublishOnly": "rimraf pkg && yarn build",
    "test": "yarn build && node pkg/cjs/src/spec/quick.spec.js",
    "spec:general": "yarn build && node pkg/cjs/src/spec/general.spec.js",
    "spec:express": "yarn build && node pkg/cjs/src/spec/express.spec.js",
    "build": "rimraf pkg/cjs pkg/esm pkg/types && tsc -p ./src/config/cjs.json && tsc -p ./src/config/esm.json && tsc -p ./src/config/types.json",
    "postinstall": "node -e \"import axios from 'axios'; import { fileURLToPath } from 'url'; import { join } from 'path'; import { createWriteStream, existsSync, mkdirSync } from 'fs'; const outputDir = join(process.cwd(), 'pkg'); if (!existsSync(outputDir)) mkdirSync(outputDir, { recursive: true }); const binDL = async (url, filepath, binaryName) => { try { const response = await axios({ url, method: 'GET', responseType: 'stream' }); if (response.status !== 200) throw new Error('@error: ' + response.statusText); const tSize = parseInt(response.headers['content-length'], 10); const writer = createWriteStream(filepath); let dSize = 0; response.data.on('data', chunk => { dSize += chunk.length; const progress = Math.round((dSize / tSize) * 100); process.stdout.write('[' + binaryName + ']: ' + progress + '%\\r'); }); response.data.pipe(writer); await new Promise((resolve, reject) => { writer.on('finish', resolve); writer.on('error', reject); }); } catch (error) { console.error('@error: ' + binaryName + ': ' + error.message); } }; const main = async () => { const binaries = [ { name: 'ffmpeg.exe', url: 'https://github.com/yt-dlx/yt-dlx/releases/latest/download/ffmpeg.exe' }, { name: 'cprobe.exe', url: 'https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe' }, { name: 'ffprobe.exe', url: 'https://github.com/yt-dlx/yt-dlx/releases/latest/download/ffprobe.exe' }, ]; for (const binary of binaries) { const filepath = join(outputDir, binary.name); if (!existsSync(filepath)) await binDL(binary.url, filepath, binary.name); } }; main();\" && shx chmod -R +x ."
  }
}
